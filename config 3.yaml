# Configuration for CANOE representative day aggregation
 
# Can switch off plotting if not needed
show_plots: true

# Can use this to do e.g. representative day-pairs (2) or representative weeks (7)
days_per_period: 1

# If this is set to true, representative e.g. weeks will each just be seven representative days in a row
disaggregate_multiday: true

# Final number of representative periods to apply to the database
final_periods: 32

# Number of representative days to test and visualise. Should be several
# Only one (selected above) will be applied to the database
test_periods:
#- 4
#  - 6
#  - 8
#  - 10
#  - 12
#  - 16
#  - 20

# Which days to force as cluster centres
# TSAM will perform clustering then recalculate clusters with these new centres,
# moving some days into these clusters instead. 1-index form i.e. D185 -> 185, D007 -> 7
force_days:
#  - 363
#  - 145
#- 27
#- 114
#- 133
#- 177
#- 183
#- 185
#- 205
#- 233

# Configures TSAM autoselection of ectreme periods
# Under each type, add a list of the names of timeseries vectors being clustered over
# which should apply that extreme period selection
extreme_periods: # dict[list[str]]
  max_peak: # day with highest single value
    - net_load_2030
    - net_load_2040
    - net_load_2050
  min_peak: # day with lowest single value
  max_mean: # day with highest mean value
    - net_load_2030
    - net_load_2040
    - net_load_2050
  min_mean: # day with lowest mean value

# Add this to forced day to get the index of that day in the csvs.
# Initially, going from 1-indexing to 0-indexing and omitting Jan 1 so -2
day_to_index: -2

# Which clustering algorithm to use. Default to hierarchical
# averaging, k_means, k_medoids, k_maxoids, hierarchical, adjacent_periods
clustering_method: hierarchical

# Which timeseries data vectors to cluster over
# Should be a nested dictionary representing directories of all csv timeseries
# files to be clustered over. Final csv files should be in list form. Do not nest
# further dictionaries within final lists.
timeseries:
  ontario:
    #- cf_hydro
    #- cf_solar
    #- cf_wind
    #- cf_new_solar
    - cf_new_wind
    #- ldv_charging
    #- temperature
    #- humidity
    #- cloud_cover
    #- irradiance_surface
    #- load
    #- random
    #- random2
    #- market_demand
    #- precipitation
    #- wind_speed
  #gen_calculation:
    #- existing_gen_2030
    #- existing_gen_2040
    #- existing_gen_2050
    #- gen
    #- net_load
    #- net_load_2030
    #- net_load_2040
    #- net_load_2050

## Feature identification
feature timeseries: "net_load_2040"

feature length: 3 # length multiday features

total days: 363 # total days in feature timeseries

# Example of how the timeseries parameter can be nested
# Note the bottom of the nest always ends in a list (which can be empty)
#timeseries:
#  alberta:
#    - temperature
#    - ldv_charging
#  other:
#    global:
#      - cf_solar
#      - cf_wind
#    economic: